sd = (beta.sigma**2 * sigma.c**2) / (sigma.c**2 + sum((x - xbar)**2) * beta.sigma**2)
beta[i] = rnorm(1, mean, sd)
}
# Mise à jour de la chaîne
chain[k+1,] = c(alpha.c, beta.c, alpha.sigma, beta.sigma, sigma.c, alpha, beta)
}
return(chain)
}
#
chain = Gibbs(10**4, y, prop_sd = c(1e-6, 1e-6, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001))
View(chain)
y[1,]
beta[1]
beta[1]*(x-xbar)
summary(mcmc(chain[-burnin,]))[1:5]
summary(mcmc(chain[-burnin,]))$statistics
summary(mcmc(chain[-burnin,]))$statistics[1:5]
summary(mcmc(chain[-burnin,]))$statistics[1:5,]
burnin = 1:1000
summary(mcmc(chain[-burnin,]))$statistics[1:5,]
#
chain = Gibbs(10**4, y, prop_sd = c(0.1, 0.1, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001))
summary(mcmc(chain[-burnin,]))$statistics[1:5,]
y2 = matrix(NA, ni, nj)
for(i in 1:ni){
for (j in 1:nj){
y2[i,j] = rnorm(1, mean(chain[,i+5]) + mean(chain[,i+35]) * (x[j] - xbar), mean(chain[,5]**2))
}
}
View(y2)
View(y)
# Data
ni = 30 # nombres de lignes (rats)
nj = 5 # nombres de colonnes (jours)
y = structure(c(151, 145, 147, 155, 135, 159, 141, 159, 177, 134,
160, 143, 154, 171, 163, 160, 142, 156, 157, 152, 154, 139, 146,
157, 132, 160, 169, 157, 137, 153, 199, 199, 214, 200, 188, 210,
189, 201, 236, 182, 208, 188, 200, 221, 216, 207, 187, 203, 212,
203, 205, 190, 191, 211, 185, 207, 216, 205, 180, 200, 246, 249,
263, 237, 230, 252, 231, 248, 285, 220, 261, 220, 244, 270, 242,
248, 234, 243, 259, 246, 253, 225, 229, 250, 237, 257, 261, 248,
219, 244, 283, 293, 312, 272, 280, 298, 275, 297, 350, 260, 313,
273, 289, 326, 281, 288, 280, 283, 307, 286, 298, 267, 272, 285,
286, 303, 295, 289, 258, 286, 320, 354, 328, 297, 323, 331, 305,
338, 376, 296, 352, 314, 325, 358, 312, 324, 316, 317, 336, 321,
334, 302, 302, 323, 331, 345, 333, 316, 291, 324),
.Dim = c(ni, nj))
colnames(y) = c("Jour 8", "Jour 15", "Jour 22", "Jour 29", "Jour 36")
x = c(8.0, 15.0, 22.0, 29.0, 36.0)
xbar = 22.0
Gibbs = function(nchain, data, prop_sd){
x = c(8.0, 15.0, 22.0, 29.0, 36.0)
xbar = 22.0
# État initial
alpha.c = data[1,1]
beta.c = 0
alpha.sigma = sd(data[,1])
beta.sigma = 1
sigma.c = sd(data)
alpha = rep(mean(data[,1]), ni)
beta = rep(mean(data[,2])/mean(data[,1]), ni)
init = c(alpha.c, beta.c, alpha.sigma, beta.sigma, sigma.c, alpha, beta)
# Début de la chaîne
chain = matrix(NA, nchain + 1, 65)
chain[1,] = init
for (k in 1:nchain){
# Mise à jour de alpha.c
mean = (prop_sd[1]**2 * sum(alpha))/(alpha.sigma**2 + ni * prop_sd[1]**2)
sd = (prop_sd[1]**2 * alpha.sigma**2)/(alpha.sigma**2 + ni * prop_sd[1]**2)
alpha.c = rnorm(1, mean, sd)
# Mise à jour de beta.c
mean = (prop_sd[2]**2 * sum(beta))/(beta.sigma**2 + ni * prop_sd[2]**2)
sd = (prop_sd[2]**2 * beta.sigma**2)/(beta.sigma**2 + ni * prop_sd[2]**2)
beta.c = rnorm(1, mean, sd)
# Mise à jour de alpha.sigma
a = prop_sd[3] + ni / 2
b = (2 * prop_sd[4] + sum((alpha - alpha.c)**2))/2
alpha.sigma = 1/rgamma(1, a, 1/b)
# Mise à jour de beta.sigma
a = prop_sd[5] + ni / 2
b = (2 * prop_sd[6] + sum((beta - beta.c)**2))/2
beta.sigma = 1/rgamma(1, a, 1/b)
# Mise à jour de sigma.c
a = prop_sd[7] + ni * nj / 2
tot = 0
for (i in 1:ni){
for (j in 1:nj){
s = (data[i,j] - alpha[i] - beta[i]*(x[j] - xbar))**2
tot = tot + s
}
}
b = (2 * prop_sd[8] + tot)/2
print(b)
sigma.c = 1/rgamma(1, a, 1/b)
# Mise à jour de alpha
for (i in 1:ni){
mean = (alpha.c * sigma.c**2 + alpha.sigma**2 * sum(data[i,] - beta[i]*(x - xbar))) / (sigma.c**2 + nj * alpha.sigma**2)
sd = (alpha.sigma**2 * sigma.c**2) / (sigma.c**2 + nj * alpha.sigma**2)
alpha[i] = rnorm(1, mean, sd)
}
# Mise à jour de beta
for (i in 1:ni){
mean = (beta.c * sigma.c**2 + beta.sigma**2 * sum((x - xbar) * (data[i,] - alpha[i]))) / (sigma.c**2 + sum((x - xbar)**2) * beta.sigma**2)
sd = (beta.sigma**2 * sigma.c**2) / (sigma.c**2 + sum((x - xbar)**2) * beta.sigma**2)
beta[i] = rnorm(1, mean, sd)
}
# Mise à jour de la chaîne
chain[k+1,] = c(alpha.c, beta.c, alpha.sigma, beta.sigma, sigma.c, alpha, beta)
}
return(chain)
}
Gibbs = function(nchain, data, prop_sd){
x = c(8.0, 15.0, 22.0, 29.0, 36.0)
xbar = 22.0
# État initial
alpha.c = data[1,1]
beta.c = 0
alpha.sigma = sd(data[,1])
beta.sigma = 1
sigma.c = sd(data)
alpha = rep(mean(data[,1]), ni)
beta = rep(mean(data[,2])/mean(data[,1]), ni)
init = c(alpha.c, beta.c, alpha.sigma, beta.sigma, sigma.c, alpha, beta)
# Début de la chaîne
chain = matrix(NA, nchain + 1, 65)
chain[1,] = init
for (k in 1:nchain){
# Mise à jour de alpha.c
mean = (prop_sd[1]**2 * sum(alpha))/(alpha.sigma**2 + ni * prop_sd[1]**2)
sd = (prop_sd[1]**2 * alpha.sigma**2)/(alpha.sigma**2 + ni * prop_sd[1]**2)
alpha.c = rnorm(1, mean, sd)
# Mise à jour de beta.c
mean = (prop_sd[2]**2 * sum(beta))/(beta.sigma**2 + ni * prop_sd[2]**2)
sd = (prop_sd[2]**2 * beta.sigma**2)/(beta.sigma**2 + ni * prop_sd[2]**2)
beta.c = rnorm(1, mean, sd)
# Mise à jour de alpha.sigma
a = prop_sd[3] + ni / 2
b = (2 * prop_sd[4] + sum((alpha - alpha.c)**2))/2
alpha.sigma = 1/rgamma(1, a, 1/b)
# Mise à jour de beta.sigma
a = prop_sd[5] + ni / 2
b = (2 * prop_sd[6] + sum((beta - beta.c)**2))/2
beta.sigma = 1/rgamma(1, a, 1/b)
# Mise à jour de sigma.c
a = prop_sd[7] + ni * nj / 2
tot = 0
for (i in 1:ni){
for (j in 1:nj){
s = (data[i,j] - alpha[i] - beta[i]*(x[j] - xbar))**2
tot = tot + s
}
}
b = (2 * prop_sd[8] + tot)/2
sigma.c = 1/rgamma(1, a, 1/b)
# Mise à jour de alpha
for (i in 1:ni){
mean = (alpha.c * sigma.c**2 + alpha.sigma**2 * sum(data[i,] - beta[i]*(x - xbar))) / (sigma.c**2 + nj * alpha.sigma**2)
sd = (alpha.sigma**2 * sigma.c**2) / (sigma.c**2 + nj * alpha.sigma**2)
alpha[i] = rnorm(1, mean, sd)
}
# Mise à jour de beta
for (i in 1:ni){
mean = (beta.c * sigma.c**2 + beta.sigma**2 * sum((x - xbar) * (data[i,] - alpha[i]))) / (sigma.c**2 + sum((x - xbar)**2) * beta.sigma**2)
sd = (beta.sigma**2 * sigma.c**2) / (sigma.c**2 + sum((x - xbar)**2) * beta.sigma**2)
beta[i] = rnorm(1, mean, sd)
}
# Mise à jour de la chaîne
chain[k+1,] = c(alpha.c, beta.c, alpha.sigma, beta.sigma, sigma.c, alpha, beta)
}
return(chain)
}
#
chain = Gibbs(10**4, y, prop_sd = c(0.1, 0.1, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001))
y2 = matrix(NA, ni, nj)
for(i in 1:ni){
for (j in 1:nj){
y2[i,j] = rnorm(1, mean(chain[,i+5]) + mean(chain[,i+35]) * (x[j] - xbar), mean(chain[,5]**2))
}
}
View(y2)
View(chain)
y2 = matrix(NA, ni, nj)
for(i in 1:ni){
for (j in 1:nj){
y2[i,j] = rnorm(1, chain[10001,i+5] + chain[10001,i+35] * (x[j] - xbar), chain[10001,5]**2)
}
}
View(y2)
plot(mcmc(chain[-burnin,]))
burnin = 1:1000
plot(mcmc(chain[-burnin,]))
plot(mcmc(chain[-burnin,]))
chain = Gibbs(10**4, y, prop_sd = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1))
summary(mcmc(chain[-burnin,]))$statistics[1:5,]
y2 = matrix(NA, ni, nj)
for(i in 1:ni){
for (j in 1:nj){
y2[i,j] = rnorm(1, chain[10001,i+5] + chain[10001,i+35] * (x[j] - xbar), chain[10001,5]**2)
}
}
#
chain = Gibbs(10**4, y, prop_sd = c(0.1, 0.1, 1, 1, 1, 1, 1, 1))
y2 = matrix(NA, ni, nj)
for(i in 1:ni){
for (j in 1:nj){
y2[i,j] = rnorm(1, chain[10001,i+5] + chain[10001,i+35] * (x[j] - xbar), chain[10001,5]**2)
}
}
summary(mcmc(chain[-burnin,]))$statistics[1:5,]
mcmc(chain[-burnin,])
plot(mcmc(chain[-burnin,])[1:5,])
plot(mcmc(chain[-burnin,])[1:5,])
plot(mcmc(chain[-burnin,])[,1:5])
#
chain = Gibbs(10**4, y, prop_sd = c(1, 1, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001))
y2 = matrix(NA, ni, nj)
for(i in 1:ni){
for (j in 1:nj){
y2[i,j] = rnorm(1, chain[10001,i+5] + chain[10001,i+35] * (x[j] - xbar), chain[10001,5]**2)
}
}
View(y2)
# Data
ni = 30 # nombres de lignes (rats)
nj = 5 # nombres de colonnes (jours)
y = structure(c(151, 145, 147, 155, 135, 159, 141, 159, 177, 134,
160, 143, 154, 171, 163, 160, 142, 156, 157, 152, 154, 139, 146,
157, 132, 160, 169, 157, 137, 153, 199, 199, 214, 200, 188, 210,
189, 201, 236, 182, 208, 188, 200, 221, 216, 207, 187, 203, 212,
203, 205, 190, 191, 211, 185, 207, 216, 205, 180, 200, 246, 249,
263, 237, 230, 252, 231, 248, 285, 220, 261, 220, 244, 270, 242,
248, 234, 243, 259, 246, 253, 225, 229, 250, 237, 257, 261, 248,
219, 244, 283, 293, 312, 272, 280, 298, 275, 297, 350, 260, 313,
273, 289, 326, 281, 288, 280, 283, 307, 286, 298, 267, 272, 285,
286, 303, 295, 289, 258, 286, 320, 354, 328, 297, 323, 331, 305,
338, 376, 296, 352, 314, 325, 358, 312, 324, 316, 317, 336, 321,
334, 302, 302, 323, 331, 345, 333, 316, 291, 324),
.Dim = c(ni, nj))
colnames(y) = c("Jour 8", "Jour 15", "Jour 22", "Jour 29", "Jour 36")
x = c(8.0, 15.0, 22.0, 29.0, 36.0)
xbar = 22.0
Gibbs = function(nchain, data, prop_sd){
x = c(8.0, 15.0, 22.0, 29.0, 36.0)
xbar = 22.0
# État initial
alpha.c = data[1,1]
beta.c = 0
alpha.sigma = sd(data[,1])
beta.sigma = 1
sigma.c = sd(data)
alpha0 = alpha.c - xbar * beta.c
alpha = rep(mean(data[,1]), ni)
beta = rep(mean(data[,2])/mean(data[,1]), ni)
init = c(alpha0, alpha.c, beta.c, alpha.sigma, beta.sigma, sigma.c, alpha, beta)
# Début de la chaîne
chain = matrix(NA, nchain + 1, 66)
chain[1,] = init
for (k in 1:nchain){
# Mise à jour de alpha.c
mean = (prop_sd[1]**2 * sum(alpha))/(alpha.sigma**2 + ni * prop_sd[1]**2)
sd = (prop_sd[1]**2 * alpha.sigma**2)/(alpha.sigma**2 + ni * prop_sd[1]**2)
alpha.c = rnorm(1, mean, sd)
# Mise à jour de beta.c
mean = (prop_sd[2]**2 * sum(beta))/(beta.sigma**2 + ni * prop_sd[2]**2)
sd = (prop_sd[2]**2 * beta.sigma**2)/(beta.sigma**2 + ni * prop_sd[2]**2)
beta.c = rnorm(1, mean, sd)
# Mise à jour de alpha.sigma
a = prop_sd[3] + ni / 2
b = (2 * prop_sd[4] + sum((alpha - alpha.c)**2))/2
alpha.sigma = 1/rgamma(1, a, 1/b)
# Mise à jour de beta.sigma
a = prop_sd[5] + ni / 2
b = (2 * prop_sd[6] + sum((beta - beta.c)**2))/2
beta.sigma = 1/rgamma(1, a, 1/b)
# Mise à jour de sigma.c
a = prop_sd[7] + ni * nj / 2
tot = 0
for (i in 1:ni){
for (j in 1:nj){
s = (data[i,j] - alpha[i] - beta[i]*(x[j] - xbar))**2
tot = tot + s
}
}
b = (2 * prop_sd[8] + tot)/2
sigma.c = 1/rgamma(1, a, 1/b)
# Mise à jour de alpha
for (i in 1:ni){
mean = (alpha.c * sigma.c**2 + alpha.sigma**2 * sum(data[i,] - beta[i]*(x - xbar))) / (sigma.c**2 + nj * alpha.sigma**2)
sd = (alpha.sigma**2 * sigma.c**2) / (sigma.c**2 + nj * alpha.sigma**2)
alpha[i] = rnorm(1, mean, sd)
}
# Mise à jour de beta
for (i in 1:ni){
mean = (beta.c * sigma.c**2 + beta.sigma**2 * sum((x - xbar) * (data[i,] - alpha[i]))) / (sigma.c**2 + sum((x - xbar)**2) * beta.sigma**2)
sd = (beta.sigma**2 * sigma.c**2) / (sigma.c**2 + sum((x - xbar)**2) * beta.sigma**2)
beta[i] = rnorm(1, mean, sd)
}
# Mise à jour de alpha0
alpha0 = alpha.c - xbar * beta.c
# Mise à jour de la chaîne
chain[k+1,] = c(alpha0, alpha.c, beta.c, alpha.sigma, beta.sigma, sigma.c, alpha, beta)
}
return(chain)
}
#
chain = Gibbs(10**4, y, prop_sd = c(1, 1, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001))
summary(chain)
summary(mcmc(chain[-burnin,]))$statistics[1:5,]
library(coda)
burnin = 1:1000
plot(mcmc(chain[-burnin,])[,1:5])
summary(mcmc(chain[-burnin,]))$statistics[1:6,]
y2 = matrix(NA, ni, nj)
for(i in 1:ni){
for (j in 1:nj){
y2[i,j] = rnorm(1, chain[10001,i+5] + chain[10001,i+35] * (x[j] - xbar), chain[10001,5]**2)
}
}
View(y2)
for(i in 1:ni){
for (j in 1:nj){
y2[i,j] = rnorm(1, chain[10001,i+6] + chain[10001,i+36] * (x[j] - xbar), chain[10001,6]**2)
}
}
View(y2)
View(y)
#
chain = Gibbs(10**4, y, prop_sd = c(1000, 1000, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001))
plot(mcmc(chain[-burnin,])[,1:6])
summary(mcmc(chain[-burnin,]))$statistics[1:6,]
y2 = matrix(NA, ni, nj)
for(i in 1:ni){
for (j in 1:nj){
y2[i,j] = rnorm(1, chain[10001,i+6] + chain[10001,i+36] * (x[j] - xbar), chain[10001,6]**2)
}
}
?rgamma
#
chain = Gibbs(10**4, y, prop_sd = c(1, 1, 0.001, 1000, 0.001, 1000, 0.001, 1000))
summary(mcmc(chain[-burnin,]))$statistics[1:6,]
Gibbs = function(nchain, data, prop_sd){
x = c(8.0, 15.0, 22.0, 29.0, 36.0)
xbar = 22.0
# État initial
alpha.c = data[1,1]
beta.c = 0
alpha.sigma = sd(data[,1])
beta.sigma = 1
sigma.c = sd(data)
alpha0 = alpha.c - xbar * beta.c
alpha = rep(mean(data[,1]), ni)
beta = rep(mean(data[,2])/mean(data[,1]), ni)
init = c(alpha0, alpha.c, beta.c, alpha.sigma, beta.sigma, sigma.c, alpha, beta)
# Début de la chaîne
chain = matrix(NA, nchain + 1, 66)
chain[1,] = init
for (k in 1:nchain){
# Mise à jour de alpha.c
mean = (prop_sd[1]**2 * sum(alpha))/(alpha.sigma**2 + ni * prop_sd[1]**2)
sd = (prop_sd[1]**2 * alpha.sigma**2)/(alpha.sigma**2 + ni * prop_sd[1]**2)
alpha.c = rnorm(1, mean, sd)
# Mise à jour de beta.c
mean = (prop_sd[2]**2 * sum(beta))/(beta.sigma**2 + ni * prop_sd[2]**2)
sd = (prop_sd[2]**2 * beta.sigma**2)/(beta.sigma**2 + ni * prop_sd[2]**2)
beta.c = rnorm(1, mean, sd)
# Mise à jour de alpha.sigma
a = prop_sd[3] + ni / 2
b = (2 * prop_sd[4] + sum((alpha - alpha.c)**2))/2
alpha.sigma = 1/rgamma(1, a, b)
# Mise à jour de beta.sigma
a = prop_sd[5] + ni / 2
b = (2 * prop_sd[6] + sum((beta - beta.c)**2))/2
beta.sigma = 1/rgamma(1, a, b)
# Mise à jour de sigma.c
a = prop_sd[7] + ni * nj / 2
tot = 0
for (i in 1:ni){
for (j in 1:nj){
s = (data[i,j] - alpha[i] - beta[i]*(x[j] - xbar))**2
tot = tot + s
}
}
b = (2 * prop_sd[8] + tot)/2
sigma.c = 1/rgamma(1, a, b)
# Mise à jour de alpha
for (i in 1:ni){
mean = (alpha.c * sigma.c**2 + alpha.sigma**2 * sum(data[i,] - beta[i]*(x - xbar))) / (sigma.c**2 + nj * alpha.sigma**2)
sd = (alpha.sigma**2 * sigma.c**2) / (sigma.c**2 + nj * alpha.sigma**2)
alpha[i] = rnorm(1, mean, sd)
}
# Mise à jour de beta
for (i in 1:ni){
mean = (beta.c * sigma.c**2 + beta.sigma**2 * sum((x - xbar) * (data[i,] - alpha[i]))) / (sigma.c**2 + sum((x - xbar)**2) * beta.sigma**2)
sd = (beta.sigma**2 * sigma.c**2) / (sigma.c**2 + sum((x - xbar)**2) * beta.sigma**2)
beta[i] = rnorm(1, mean, sd)
}
# Mise à jour de alpha0
alpha0 = alpha.c - xbar * beta.c
# Mise à jour de la chaîne
chain[k+1,] = c(alpha0, alpha.c, beta.c, alpha.sigma, beta.sigma, sigma.c, alpha, beta)
}
return(chain)
}
#
chain = Gibbs(10**4, y, prop_sd = c(1, 1, 0.001, 1000, 0.001, 1000, 0.001, 1000))
summary(mcmc(chain[-burnin,]))$statistics[1:6,]
Gibbs = function(nchain, data, prop_sd){
x = c(8.0, 15.0, 22.0, 29.0, 36.0)
xbar = 22.0
# État initial
alpha.c = data[1,1]
beta.c = 0
alpha.sigma = sd(data[,1])
beta.sigma = 1
sigma.c = sd(data)
alpha0 = alpha.c - xbar * beta.c
alpha = rep(mean(data[,1]), ni)
beta = rep(mean(data[,2])/mean(data[,1]), ni)
init = c(alpha0, alpha.c, beta.c, alpha.sigma, beta.sigma, sigma.c, alpha, beta)
# Début de la chaîne
chain = matrix(NA, nchain + 1, 66)
chain[1,] = init
for (k in 1:nchain){
# Mise à jour de alpha.c
mean = (prop_sd[1]**2 * sum(alpha))/(alpha.sigma**2 + ni * prop_sd[1]**2)
sd = (prop_sd[1]**2 * alpha.sigma**2)/(alpha.sigma**2 + ni * prop_sd[1]**2)
alpha.c = rnorm(1, mean, sd)
# Mise à jour de beta.c
mean = (prop_sd[2]**2 * sum(beta))/(beta.sigma**2 + ni * prop_sd[2]**2)
sd = (prop_sd[2]**2 * beta.sigma**2)/(beta.sigma**2 + ni * prop_sd[2]**2)
beta.c = rnorm(1, mean, sd)
# Mise à jour de alpha.sigma
a = prop_sd[3] + ni / 2
b = (2 * prop_sd[4] + sum((alpha - alpha.c)**2))/2
alpha.sigma = 1/rgamma(1, a, 1/b)
# Mise à jour de beta.sigma
a = prop_sd[5] + ni / 2
b = (2 * prop_sd[6] + sum((beta - beta.c)**2))/2
beta.sigma = 1/rgamma(1, a, 1/b)
# Mise à jour de sigma.c
a = prop_sd[7] + ni * nj / 2
tot = 0
for (i in 1:ni){
for (j in 1:nj){
s = (data[i,j] - alpha[i] - beta[i]*(x[j] - xbar))**2
tot = tot + s
}
}
b = (2 * prop_sd[8] + tot)/2
sigma.c = 1/rgamma(1, a, 1/b)
# Mise à jour de alpha
for (i in 1:ni){
mean = (alpha.c * sigma.c**2 + alpha.sigma**2 * sum(data[i,] - beta[i]*(x - xbar))) / (sigma.c**2 + nj * alpha.sigma**2)
sd = (alpha.sigma**2 * sigma.c**2) / (sigma.c**2 + nj * alpha.sigma**2)
alpha[i] = rnorm(1, mean, sd)
}
# Mise à jour de beta
for (i in 1:ni){
mean = (beta.c * sigma.c**2 + beta.sigma**2 * sum((x - xbar) * (data[i,] - alpha[i]))) / (sigma.c**2 + sum((x - xbar)**2) * beta.sigma**2)
sd = (beta.sigma**2 * sigma.c**2) / (sigma.c**2 + sum((x - xbar)**2) * beta.sigma**2)
beta[i] = rnorm(1, mean, sd)
}
# Mise à jour de alpha0
alpha0 = alpha.c - xbar * beta.c
# Mise à jour de la chaîne
chain[k+1,] = c(alpha0, alpha.c, beta.c, alpha.sigma, beta.sigma, sigma.c, alpha, beta)
}
return(chain)
}
#
chain = Gibbs(10**4, y, prop_sd = c(1, 1, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001))
summary(mcmc(chain[-burnin,]))$statistics[1:6,]
1/summary(mcmc(chain[-burnin,]))$statistics[1:6,][6,1]
1/summary(mcmc(chain[-burnin,]))$statistics[1:6,][5,1]
install.packages("igraph", lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
?igraph
igraph::plot.igraph()
?plot.igraph
library(igraph)
x = c("y", "alpha", "beta")
plot.igraph(x)
?graph
?graph
x = c("y", "alpha", "beta")
gr = make_graph(x)
plot.igraph(gr)
?expression
expression(beta)
x = c("'r $Y_{ij}$'", "alpha", "beta")
gr = make_graph(x)
plot.igraph(gr)
x = c('r $Y_{ij}$', "alpha", "beta")
gr = make_graph(x)
plot.igraph(gr)
install.packages("latex2exp", lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
library(latex2exp)
x = c(TeX('r $Y_{ij}$'), "alpha", "beta")
gr = make_graph(x)
TeX('r $Y_{ij}$')
character(TeX('r $Y_{ij}$'))
x = c(TeX(r'$Y_{ij}$'), "alpha", "beta")
x = c(TeX(r'($Y_{ij}$)'), "alpha", "beta")
gr = make_graph(x)
TeX(r'($Y_{ij}$)')
TeX(r'($Y_{ij}$)')$plotmath
x = c("Y_ij", "alpha.i", "beta.i", "sigma.c", "alpha.c", "sigma.alpha", "beta.c", "sigma.beta")
gr = make_graph(x)
plot.igraph(gr)
?make_graph
x = c("Y_ij", "alpha.i", "beta.i", "sigma.c", "alpha.c", "sigma.alpha", "beta.c", "sigma.beta")
gr = make_graph(x)
tkplot(gr)
